name: Build and Test C++ Project

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y g++ make valgrind

      - name: Test cpp_00/ex00
        working-directory: cpp_00/ex00
        run: |
          echo "Testing Makefile for ex00"
          make >> ../../debug.txt 2>&1
          echo "Cleaning and relinking..." >> ../../debug.txt
          make clean >> ../../debug.txt 2>&1
          make >> ../../debug.txt 2>&1
          echo "Testing re..." >> ../../debug.txt
          make re >> ../../debug.txt 2>&1
          echo "TODO: Implement tests for ex00" >> ../../debug.txt
          echo "Tests for ex00 complete." >> ../../debug.txt
#          echo "Running tests for ex00..." >> ../../debug.txt
#          ./megaphone "shhhhh... I think the students are asleep..." | grep -q "SHHHHH... I THINK THE STUDENTS ARE ASLEEP..." >> ../../debug.txt
#          ./megaphone "Damnit ! Sorry students, I thought this thing was off." | grep -q "DAMNIT ! SORRY STUDENTS, I THOUGHT THIS THING WAS OFF." >> ../../debug.txt
#          ./megaphone | grep -q "\* LOUD AND UNBEARABLE FEEDBACK NOISE \*" >> ../../debug.txt
#          ./megaphone "" | grep -q "\* LOUD AND UNBEARABLE FEEDBACK NOISE \*" >> ../../debug.txt
#          echo "Running valgrind for ex00..." >> ../../debug.txt
#          valgrind --leak-check=full ./megaphone "shhhhh... I think the students are asleep..." >> ../../debug.txt
#          valgrind --leak-check=full ./megaphone "Damnit ! Sorry students, I thought this thing was off." >> ../../debug.txt
#          valgrind --leak-check=full ./megaphone >> ../../debug.txt
#          valgrind --leak-check=full ./megaphone "" >> ../../debug.txt

      - name: Test cpp_00/ex01
        working-directory: cpp_00/ex01
        run: |
          echo "Testing Makefile for ex01" >> ../../debug.txt
          make >> ../../debug.txt 2>&1
          echo "Cleaning and relinking..." >> ../../debug.txt
          make clean >> ../../debug.txt 2>&1
          make >> ../../debug.txt 2>&1
          echo "Testing re..." >> ../../debug.txt
          make re >> ../../debug.txt 2>&1
          echo "TODO: Implement tests for ex01" >> ../../debug.txt

      - name: Test cpp_00/ex02
        working-directory: cpp_00/ex02
        run: |
          echo "Testing Makefile for ex02" >> ../../debug.txt
          make >> ../../debug.txt 2>&1
          echo "Cleaning and relinking..." >> ../../debug.txt
          make clean >> ../../debug.txt 2>&1
          make >> ../../debug.txt 2>&1
          echo "Testing re..." >> ../../debug.txt
          make re >> ../../debug.txt 2>&1
          echo "TODO: Implement tests for ex02" >> ../../debug.txt

      - name: Upload debug logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: debug-logs
          path: debug.txt

  post:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Push to debug on failure
        if: failure()
        run: |
          git checkout -b debug || git checkout debug
          git add .
          git commit -m "Debugging branch: Fix failed tests"
          git push origin debug

      - name: Push to main on success
        if: success()
        run: |
          git fetch origin main || echo "Branch 'main' does not exist. It will be created."
          git checkout main || git checkout -b main
          git merge develop --strategy-option theirs
          git push origin main
        

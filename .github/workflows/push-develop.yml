name: Develop Branch Push Workflow

on:
  push:
    branches:
      - develop

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y g++ make valgrind

      - name: Run test scripts
        run: |
          artifact_log="failed_tests.txt"
          echo "" > $artifact_log
          echo "success" > build_status.txt

          for script in $(find . -name "test_m0*ex*.sh"); do
            echo "Running $script"
            dir=$(dirname "$script")
            cd $dir

            bash $(basename "$script")

            if [ -f debug.txt ]; then
              echo "$(basename $dir): Test failed." >> ../../$artifact_log
            fi

            cd - > /dev/null
          done

          if [ -s $artifact_log ]; then
            echo "Tests failed. See $artifact_log for details."
            echo "failure" > build_status.txt
          else
            echo "All tests passed successfully."
          fi

      - name: Upload failed tests log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-tests
          path: failed_tests.txt

  redirect-on-failure:
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Check build status
        id: check_status
        run: |
          STATUS=$(cat build_status.txt)
          echo "::set-output name=status::$STATUS"

      - name: Redirect push to debug
        if: steps.check_status.outputs.status == 'failure'
        run: |
          git fetch origin debug || echo "Branch 'debug' does not exist."
          if ! git ls-remote --exit-code origin debug; then
            git branch debug
            echo "Branch 'debug' created."
          fi

          git checkout debug
          git merge develop --allow-unrelated-histories --strategy-option theirs
          git push origin debug

      - name: Authorize push to develop
        if: steps.check_status.outputs.status == 'success'
        run: |
          echo "Tests passed. Push to 'develop' is allowed."
